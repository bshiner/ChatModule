<?php
// File: web_chat_widget/web_chat_widget.info.yml
name: 'Web Chat Widget'
type: module
description: 'Provides a floating chat widget with external API integration'
core_version_requirement: ^10
dependencies:
  - drupal:system

<?php
// File: web_chat_widget/src/Form/WebChatWidgetSettingsForm.php

namespace Drupal\web_chat_widget\Form;

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Configure Web Chat Widget settings.
 */
class WebChatWidgetSettingsForm extends ConfigFormBase {

  /**
   * {@inheritdoc}
   */
  protected function getEditableConfigNames() {
    return ['web_chat_widget.settings'];
  }

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'web_chat_widget_settings_form';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $config = $this->config('web_chat_widget.settings');

    $form['enabled'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Enable Chat Widget'),
      '#default_value' => $config->get('enabled'),
      '#description' => $this->t('Check to enable the chat widget on all pages.'),
    ];

    $form['api_settings'] = [
      '#type' => 'fieldset',
      '#title' => $this->t('API Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    ];

    $form['api_settings']['api_endpoint'] = [
      '#type' => 'url',
      '#title' => $this->t('API Endpoint'),
      '#default_value' => $config->get('api_endpoint'),
      '#description' => $this->t('The URL of your chatbot API endpoint.'),
      '#required' => TRUE,
    ];

    $form['api_settings']['api_key'] = [
      '#type' => 'textfield',
      '#title' => $this->t('API Key'),
      '#default_value' => $config->get('api_key'),
      '#description' => $this->t('API key for authentication (if required).'),
    ];

    $form['widget_settings'] = [
      '#type' => 'fieldset',
      '#title' => $this->t('Widget Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    ];

    $form['widget_settings']['welcome_message'] = [
      '#type' => 'textarea',
      '#title' => $this->t('Welcome Message'),
      '#default_value' => $config->get('welcome_message') ?: 'Hello! How can I help you today?',
      '#description' => $this->t('Initial message displayed when chat opens.'),
    ];

    $form['widget_settings']['position'] = [
      '#type' => 'select',
      '#title' => $this->t('Widget Position'),
      '#options' => [
        'bottom-right' => $this->t('Bottom Right'),
        'bottom-left' => $this->t('Bottom Left'),
      ],
      '#default_value' => $config->get('position') ?: 'bottom-right',
    ];

    $form['widget_settings']['theme'] = [
      '#type' => 'select',
      '#title' => $this->t('Theme'),
      '#options' => [
        'default' => $this->t('Default'),
        'dark' => $this->t('Dark'),
        'minimal' => $this->t('Minimal'),
      ],
      '#default_value' => $config->get('theme') ?: 'default',
    ];

    return parent::buildForm($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $this->config('web_chat_widget.settings')
      ->set('enabled', $form_state->getValue('enabled'))
      ->set('api_endpoint', $form_state->getValue('api_endpoint'))
      ->set('api_key', $form_state->getValue('api_key'))
      ->set('welcome_message', $form_state->getValue('welcome_message'))
      ->set('position', $form_state->getValue('position'))
      ->set('theme', $form_state->getValue('theme'))
      ->save();

    parent::submitForm($form, $form_state);
  }
}

---

<?php
// File: web_chat_widget/src/Controller/ApiProxyController.php

namespace Drupal\web_chat_widget\Controller;

use Drupal\Core\Controller\ControllerBase;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use GuzzleHttp\ClientInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * API Proxy Controller for chat widget.
 */
class ApiProxyController extends ControllerBase {

  /**
   * The HTTP client.
   *
   * @var \GuzzleHttp\ClientInterface
   */
  protected $httpClient;

  /**
   * Constructs a new ApiProxyController object.
   *
   * @param \GuzzleHttp\ClientInterface $http_client
   *   The HTTP client.
   */
  public function __construct(ClientInterface $http_client) {
    $this->httpClient = $http_client;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('http_client')
    );
  }

  /**
   * Proxy API requests to external chatbot service.
   */
  public function proxy(Request $request) {
    $config = $this->config('web_chat_widget.settings');
    $api_endpoint = $config->get('api_endpoint');
    $api_key = $config->get('api_key');

    if (!$api_endpoint) {
      return new JsonResponse(['error' => 'API endpoint not configured'], 500);
    }

    try {
      $data = json_decode($request->getContent(), TRUE);
      
      $headers = [
        'Content-Type' => 'application/json',
      ];
      
      if ($api_key) {
        $headers['Authorization'] = 'Bearer ' . $api_key;
      }

      $response = $this->httpClient->post($api_endpoint, [
        'headers' => $headers,
        'json' => $data,
        'timeout' => 30,
      ]);

      $response_data = json_decode($response->getBody(), TRUE);
      
      return new JsonResponse($response_data);
    }
    catch (\Exception $e) {
      \Drupal::logger('web_chat_widget')->error('API request failed: @message', [
        '@message' => $e->getMessage(),
      ]);
      
      return new JsonResponse([
        'error' => 'Failed to process message',
        'message' => 'Sorry, I\'m having trouble connecting right now. Please try again later.'
      ], 500);
    }
  }
}

---

<?php
// File: web_chat_widget/web_chat_widget.libraries.yml
chat_widget:
  version: 1.x
  js:
    js/chat-widget.js: {}
  css:
    theme:
      css/chat-widget.css: {}
  dependencies:
    - core/jquery
    - core/drupal
    - core/drupalSettings

---

<?php
// File: web_chat_widget/config/install/web_chat_widget.settings.yml
enabled: false
api_endpoint: ''
api_key: ''
welcome_message: 'Hello! How can I help you today?'
position: 'bottom-right'
theme: 'default'

---

// File: web_chat_widget/css/chat-widget.css

.chat-widget {
  position: fixed;
  z-index: 9999;
  font-family: Arial, Helvetica, sans-serif;
}

.chat-widget.position-bottom-right {
  bottom: 20px;
  right: 20px;
}

.chat-widget.position-bottom-left {
  bottom: 20px;
  left: 20px;
}

.chat-toggle-btn {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background-color: #1f8ceb;
  border: none;
  cursor: pointer;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 24px;
}

.chat-toggle-btn:hover {
  background-color: #1a7bc7;
  transform: scale(1.05);
}

.chat-toggle-btn.active {
  background-color: #dc3545;
}

.chat-window {
  position: absolute;
  bottom: 80px;
  right: 0;
  width: 350px;
  height: 500px;
  background: white;
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
  display: none;
  flex-direction: column;
  overflow: hidden;
  animation: slideUp 0.3s ease-out;
}

.chat-window.position-bottom-left {
  right: auto;
  left: 0;
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.chat-header {
  background: #1f8ceb;
  color: white;
  padding: 16px;
  font-weight: bold;
  text-align: center;
}

.chat-messages {
  flex: 1;
  overflow-y: auto;
  padding: 12px;
  background: #f8f9fa;
}

.message {
  margin-bottom: 12px;
  display: flex;
  align-items: flex-start;
}

.message.user {
  justify-content: flex-end;
}

.message.bot {
  justify-content: flex-start;
}

.message-bubble {
  max-width: 80%;
  padding: 12px;
  border-radius: 18px;
  word-wrap: break-word;
  position: relative;
}

.message.user .message-bubble {
  background: #1f8ceb;
  color: white;
  border-bottom-right-radius: 4px;
}

.message.bot .message-bubble {
  background: #e9ecef;
  color: #212529;
  border-bottom-left-radius: 4px;
}

.message-time {
  font-size: 11px;
  opacity: 0.7;
  margin-top: 4px;
  text-align: center;
}

.chat-input-container {
  padding: 12px;
  background: white;
  border-top: 1px solid #e9ecef;
  display: flex;
  gap: 8px;
}

.chat-input {
  flex: 1;
  border: 1px solid #e9ecef;
  border-radius: 20px;
  padding: 12px 16px;
  outline: none;
  font-size: 14px;
}

.chat-input:focus {
  border-color: #1f8ceb;
}

.chat-send-btn {
  background: #1f8ceb;
  color: white;
  border: none;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s;
}

.chat-send-btn:hover {
  background: #1a7bc7;
}

.chat-send-btn:disabled {
  background: #6c757d;
  cursor: not-allowed;
}

.typing-indicator {
  display: none;
  padding: 8px 16px;
  color: #6c757d;
  font-style: italic;
  font-size: 12px;
}

.typing-indicator.show {
  display: block;
}

/* Mobile responsiveness */
@media (max-width: 768px) {
  .chat-window {
    width: 100vw;
    height: 100vh;
    bottom: 0;
    right: 0;
    left: 0;
    border-radius: 0;
    position: fixed;
  }
  
  .chat-widget.position-bottom-left .chat-window {
    left: 0;
  }
}

/* Dark theme */
.chat-widget.theme-dark .chat-window {
  background: #2c3e50;
}

.chat-widget.theme-dark .chat-header {
  background: #34495e;
}

.chat-widget.theme-dark .chat-messages {
  background: #34495e;
}

.chat-widget.theme-dark .message.bot .message-bubble {
  background: #3c4f66;
  color: #ecf0f1;
}

.chat-widget.theme-dark .chat-input-container {
  background: #2c3e50;
  border-top-color: #34495e;
}

.chat-widget.theme-dark .chat-input {
  background: #34495e;
  border-color: #3c4f66;
  color: #ecf0f1;
}

/* Minimal theme */
.chat-widget.theme-minimal .chat-window {
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.chat-widget.theme-minimal .chat-header {
  background: #f8f9fa;
  color: #212529;
  border-bottom: 1px solid #e9ecef;
}

.chat-widget.theme-minimal .message.user .message-bubble {
  background: #007bff;
}

---

// File: web_chat_widget/js/chat-widget.js

(function ($, Drupal, drupalSettings) {
  'use strict';

  /**
   * Chat Widget functionality.
   */
  Drupal.behaviors.webChatWidget = {
    attach: function (context, settings) {
      if (typeof settings.webChatWidget === 'undefined') {
        return;
      }

      // Create chat widget only once
      if ($('.chat-widget', context).length === 0) {
        this.createChatWidget(settings.webChatWidget);
      }
    },

    createChatWidget: function (config) {
      const widget = this.buildWidgetHTML(config);
      $('body').append(widget);
      
      this.initializeEventListeners();
      this.showWelcomeMessage(config.welcomeMessage);
    },

    buildWidgetHTML: function (config) {
      const positionClass = 'position-' + (config.position || 'bottom-right');
      const themeClass = 'theme-' + (config.theme || 'default');
      
      return `
        <div class="chat-widget ${positionClass} ${themeClass}">
          <button class="chat-toggle-btn" id="chat-toggle-btn" aria-label="Open chat">
            <span class="chat-icon">💬</span>
            <span class="close-icon" style="display: none;">✕</span>
          </button>
          <div class="chat-window" id="chat-window">
            <div class="chat-header">
              Chat Support
            </div>
            <div class="chat-messages" id="chat-messages">
              <!-- Messages will be added here -->
            </div>
            <div class="typing-indicator" id="typing-indicator">
              Bot is typing...
            </div>
            <div class="chat-input-container">
              <input type="text" class="chat-input" id="chat-input" placeholder="Type your message..." maxlength="500">
              <button class="chat-send-btn" id="chat-send-btn" aria-label="Send message">
                ➤
              </button>
            </div>
          </div>
        </div>
      `;
    },

    initializeEventListeners: function () {
      const self = this;
      
      // Toggle chat window
      $('#chat-toggle-btn').on('click', function () {
        self.toggleChat();
      });

      // Send message on button click
      $('#chat-send-btn').on('click', function () {
        self.sendMessage();
      });

      // Send message on Enter key
      $('#chat-input').on('keypress', function (e) {
        if (e.which === 13 && !e.shiftKey) {
          e.preventDefault();
          self.sendMessage();
        }
      });

      // Auto-resize input on mobile
      $(window).on('resize', function () {
        self.adjustMobileLayout();
      });
    },

    toggleChat: function () {
      const $window = $('#chat-window');
      const $btn = $('#chat-toggle-btn');
      const $chatIcon = $('.chat-icon');
      const $closeIcon = $('.close-icon');

      if ($window.is(':visible')) {
        $window.hide();
        $btn.removeClass('active');
        $chatIcon.show();
        $closeIcon.hide();
      } else {
        $window.show();
        $btn.addClass('active');
        $chatIcon.hide();
        $closeIcon.show();
        $('#chat-input').focus();
        this.scrollToBottom();
      }
    },

    sendMessage: function () {
      const $input = $('#chat-input');
      const message = $input.val().trim();
      
      if (!message) return;

      // Add user message to chat
      this.addMessage(message, 'user');
      $input.val('');
      
      // Show typing indicator
      this.showTypingIndicator();
      
      // Send to API
      this.sendToAPI(message);
    },

    addMessage: function (text, sender, timestamp) {
      const time = timestamp || new Date().toLocaleTimeString([], {
        hour: '2-digit',
        minute: '2-digit'
      });
      
      const messageHTML = `
        <div class="message ${sender}">
          <div class="message-bubble">
            ${this.escapeHtml(text)}
            <div class="message-time">${time}</div>
          </div>
        </div>
      `;
      
      $('#chat-messages').append(messageHTML);
      this.scrollToBottom();
    },

    sendToAPI: function (message) {
      const self = this;
      const config = drupalSettings.webChatWidget;
      
      $.ajax({
        url: '/web-chat-widget/api-proxy',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
          message: message,
          timestamp: new Date().toISOString(),
          session_id: this.getSessionId()
        }),
        timeout: 30000,
        success: function (response) {
          self.hideTypingIndicator();
          
          if (response.message) {
            self.addMessage(response.message, 'bot');
          } else if (response.error) {
            self.addMessage('Sorry, I encountered an error. Please try again.', 'bot');
          }
        },
        error: function (xhr, status, error) {
          self.hideTypingIndicator();
          console.error('Chat API Error:', error);
          
          let errorMessage = 'Sorry, I\'m having trouble connecting right now. Please try again later.';
          
          if (xhr.responseJSON && xhr.responseJSON.message) {
            errorMessage = xhr.responseJSON.message;
          }
          
          self.addMessage(errorMessage, 'bot');
        }
      });
    },

    showWelcomeMessage: function (message) {
      if (message) {
        this.addMessage(message, 'bot');
      }
    },

    showTypingIndicator: function () {
      $('#typing-indicator').addClass('show');
      this.scrollToBottom();
    },

    hideTypingIndicator: function () {
      $('#typing-indicator').removeClass('show');
    },

    scrollToBottom: function () {
      const $messages = $('#chat-messages');
      $messages.scrollTop($messages[0].scrollHeight);
    },

    adjustMobileLayout: function () {
      // Additional mobile-specific adjustments if needed
      if ($(window).width() <= 768) {
        // Mobile-specific code
      }
    },

    getSessionId: function () {
      let sessionId = localStorage.getItem('chat_session_id');
      if (!sessionId) {
        sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('chat_session_id', sessionId);
      }
      return sessionId;
    },

    escapeHtml: function (text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
  };

})(jQuery, Drupal, drupalSettings);